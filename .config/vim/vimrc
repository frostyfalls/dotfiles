" === XDG base directories ===
set runtimepath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim/after,$XDG_CONFIG_HOME/vim
set viminfofile=$XDG_STATE_HOME/vim/viminfo

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')

let g:netrw_home = $XDG_DATA_HOME . '/vim'
call mkdir($XDG_DATA_HOME . '/vim/spell', 'p')

" === Plugin manager ===
let data_dir = $XDG_DATA_HOME . '/vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo ' . data_dir . '/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

let mapleader = ' '

call plug#begin(data_dir . '/plugged')
Plug 'morhetz/gruvbox'
Plug 'dense-analysis/ale'
Plug 'lifepillar/vim-mucomplete'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'rstacruz/vim-closer'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'baskerville/vim-sxhkdrc'
call plug#end()

" === Key maps ===
nnoremap <Leader>ww :w<CR>
nnoremap <Leader>wx :!chmod +x %<CR>

function! s:ToggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction
nnoremap <Leader>m :call <SID>ToggleQuickFix()<CR>

nnoremap <Leader>cl :so $MYVIMRC<CR>
nnoremap <Leader>ci :PlugInstall<CR>
nnoremap <Leader>cx :PlugClean<CR>

nnoremap <Leader>s :setlocal invspell<CR>

nnoremap <Leader>e :Explore<CR>

" === Other options ===
set number relativenumber
set cursorline
set breakindent list listchars=tab:»\ ,trail:·
set laststatus=2
set signcolumn=yes
set title

set splitbelow splitright
set tabstop=4 shiftwidth=4 expandtab

set formatoptions-=cro

set spelllang=en_us

let g:netrw_banner = 0

" === Color scheme ===
function! s:CustomizeThemeColors()
  " Background
  highlight Normal guibg=NONE ctermbg=NONE

  " GitGutter
  highlight SignColumn            guibg=NONE ctermbg=NONE
  highlight GitGutterAdd          guibg=NONE ctermbg=NONE
  highlight GitGutterChange       guibg=NONE ctermbg=NONE
  highlight GitGutterChangeDelete guibg=NONE ctermbg=NONE
  highlight GitGutterDelete       guibg=NONE ctermbg=NONE
endfunction

set termguicolors background=dark
let g:gruvbox_guisp_fallback = 'bg'
autocmd! ColorScheme gruvbox call s:CustomizeThemeColors()
silent! colorscheme gruvbox

" === ALE ===
let g:ale_linters = {
      \ 'c':   ['clangd'],
      \ 'cpp': ['clangd'],
      \ 'go':  ['gopls'],
      \ 'lua': ['lua-language-server'],
      \ 'sh':  ['shellcheck'],
      \ }
let g:ale_fixers = {
      \ '*':      ['remove_trailing_lines', 'trim_whitespace'],
      \ 'c':      ['clang-format', 'clangtidy'],
      \ 'cpp':    ['clang-format', 'clangtidy'],
      \ 'go':     ['gofmt'],
      \ 'lua':    ['stylua'],
      \ 'python': ['black'],
      \ 'sh':     ['shfmt'],
      \ }
let g:ale_sh_shfmt_options = '-i 4'

let g:ale_sign_column_always = 1
let g:ale_virtualtext_cursor = 'current'
highlight ALEWarning ctermbg=Yellow ctermfg=Black
highlight ALEError   ctermbg=Red    ctermfg=Black

nnoremap <Leader>f :ALEFix<CR>

" === mucomplete ===
set completeopt+=menuone,noselect
set shortmess+=c
set complete-=t,i
set complete+=k
set dictionary+=spell
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#no_mappings = 1
let g:mucomplete#spel#good_words = 1

let g:mucomplete#chains = {
      \ 'default': { 'default':     ['vsnip', 'path', 'keyp', 'uspl'],
      \              '.*string.*':  ['uspl', 'path'],
      \              '.*comment.*': ['uspl', 'path'] },
      \ 'c':   ['vsnip', 'file', 'omni', 'uspl'],
      \ 'cpp': ['vsnip', 'file', 'omni', 'uspl'],
      \ 'go':  ['vsnip', 'file', 'omni', 'uspl'],
      \ 'sh':  ['vsnip', 'file', 'uspl'],
      \ 'vim': ['vsnip', 'file', 'cmd',  'uspl'],
      \ }

inoremap <expr> <CR> pumvisible() ? '<C-y><CR>' : '<CR>'

" === vsnip ===
let g:vsnip_snippet_dir = $XDG_CONFIG_HOME . '/vim/snippets'

inoremap <expr> <C-l> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
snoremap <expr> <C-l> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
inoremap <expr> <C-h> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
snoremap <expr> <C-h> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'

" vim:ts=2 sw=2 et
