" File system setup
set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')

set runtimepath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim/after,$XDG_CONFIG_HOME/vim
set viminfofile=$XDG_STATE_HOME/vim/viminfo

let g:netrw_home = $XDG_DATA_HOME . '/vim'
call mkdir($XDG_DATA_HOME . '/vim/spell', 'p')

" Initialize plugin manager
let data_dir = $XDG_DATA_HOME . '/vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo ' . data_dir . '/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

let mapleader = ' '

call plug#begin(data_dir . '/plugged')
Plug 'morhetz/gruvbox'           " Color scheme
Plug 'dense-analysis/ale'        " LSP client, linter, and formatter
Plug 'LunarWatcher/auto-pairs'   " Paired quotes, brackets, etc.
Plug 'lifepillar/vim-mucomplete' " Minimalist completion
Plug 'vimwiki/vimwiki'           " Markdown and personal wiki
Plug 'tpope/vim-commentary'      " Comment management
call plug#end()

" Interface options
set number relativenumber
set cursorline
set list breakindent listchars=tab:»\ ,trail:·
set title

" Default indentation
set tabstop=4 shiftwidth=4 expandtab

" Status line
set laststatus=1

" Remaps
nnoremap <Leader>ww :w<CR>
nnoremap <Tab> :bn<CR>
nnoremap <S-Tab> :bp<CR>
nnoremap <Leader>y "+y
vnoremap <Leader>y "+y

" netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_altv = 1
let g:netrw_hide = 0
let g:netrw_usetab = 1
let g:netrw_winsize = -30
nnoremap <C-n> :Lexplore!<CR>
nnoremap <Leader>e :Explore<CR>

" Cursors per mode
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Completion
set completeopt+=menuone,noselect
set shortmess+=c

" Searching
set ignorecase smartcase
vnoremap S :%s//g<Left><Left>
vnoremap s :s//g<Left><Left>
nnoremap S :%s//g<Left><Left>
nnoremap s :s//g<Left><Left>

" Spell check
set spelllang=en_us
nnoremap <Leader>o :setlocal invspell<CR>

" Window split directions
set splitright splitbelow

" Scroll lines between edges
set scrolloff=5

" Color scheme
set termguicolors
set background=dark
let g:gruvbox_guisp_fallback = 'bg'
silent! colorscheme gruvbox
highlight Normal guibg=NONE ctermbg=NONE

" ALE status line format
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %severity%: %s'

" ALE inline messages
let g:ale_virtualtext_cursor = 'current'

" ALE color format
highlight ALEWarning ctermbg=Yellow ctermfg=Black
highlight ALEError   ctermbg=Red    ctermfg=Black

" ALE linters and fixers
let g:ale_linters = {
      \   'c': ['clangd'],
      \   'cpp': ['clangd'],
      \   'go': ['gopls'],
      \   'sh': ['shellcheck'],
      \ }
let g:ale_fixers = {
      \   'c': ['clang-format', 'clangtidy'],
      \   'cpp': ['clang-format', 'clangtidy'],
      \   'go': ['gofmt'],
      \   'sh': ['shfmt'],
      \ }
let g:ale_sh_shfmt_options = '-i 4'
